# this is the answer file for Assignment "Building a Sweet Compose File"
# you can run it from this answer directory with `docker compose up`
# CHANGES since the video's first release
# 1. the bind-mount build paths are changed to work from this subdir
# 2. compose versions are no longer needed for Compose CLI
# 3. Traefik command format has changed for traefik v2.
# 4. I now publish the Traefik port on 8080 to avoid issues with people already running something on that host port
# 5. Traefik has a dashboard that listens on port 8080 inside its container, not to be confused with the docker published port 8080
# 6. These apps now assume auth to postgres
# Note, Traefik now has 2.0 versions, which use a different config format
#       If you'd like to check that out, and try to make it work, I have a repo here: https://github.com/BretFisher/compose-dev-tls

services:

  traefik:
    image: traefik:1.7-alpine
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:80"
    command:
      - --docker
      - --docker.domain=traefik
      - --docker.watch
      - --api
      - --defaultentrypoints=http,https
    labels:
      - traefik.port=8080
      - traefik.frontend.rule=Host:traefik.localhost
    networks:
      - frontend
      - backend

  redis:
    image: redis:alpine
    networks:
      - frontend
    healthcheck:
      test: redis-cli ping

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: pg_isready -h 127.0.0.1

  vote:
    image: bretfisher/examplevotingapp_vote
    networks:
      - frontend
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - traefik.port=80
      - traefik.frontend.rule=Host:vote.localhost

  result:
    build:
      context: ../result
    command: nodemon server.js
    volumes:
      - ../result:/app
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.port=80
      - traefik.frontend.rule=Host:result.localhost

  worker:
    image: bretfisher/examplevotingapp_worker
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

networks:
  frontend:
  backend:

volumes:
  db-data:
